// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RallyStatus {
  active
  inactive
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  kits          Kit[]
  rallies       Rally[]
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  is_public         Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Kit {
  id             String    @id
  title          String
  description    String?
  tags           String[]
  thumbnailImage String
  rewardImage    String
  blurredImage   String
  uploaderId     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  uploader       User      @relation(fields: [uploaderId], references: [id])
  stamps         Stamp[]
  rallies        Rally[]
}

model Stamp {
  id        String @id @default(cuid())
  kitId     String
  objectKey String
  kit       Kit    @relation(fields: [kitId], references: [id])
}

model Rally {
  id              String      @id @default(cuid())
  title           String
  description     String?
  status          RallyStatus
  kitId           String
  starterId       String
  stampCount      Int         @default(0)
  lastStampDate   DateTime?
  dueDate         DateTime?
  completionDate  DateTime?
  extendedDueDate DateTime?
  isPublic        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
  kit             Kit         @relation(fields: [kitId], references: [id])
  starter         User        @relation(fields: [starterId], references: [id])
}
